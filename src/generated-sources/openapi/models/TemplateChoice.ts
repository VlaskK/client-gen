// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Вариант ответа шаблона вопроса
 * @export
 * @interface TemplateChoice
 */
export interface TemplateChoice  {
    /**
     * Уникальный идентификатор
     * @type {string}
     * @memberof TemplateChoice
     */
    id?: string;
    /**
     * Название
     * @type {string}
     * @memberof TemplateChoice
     */
    name?: string;
    /**
     * Значение
     * @type {string}
     * @memberof TemplateChoice
     */
    value?: string;
    /**
     * Комментарий
     * @type {string}
     * @memberof TemplateChoice
     */
    comment?: string;
    /**
     * Название приложенного файла
     * @type {string}
     * @memberof TemplateChoice
     */
    media?: string;
    /**
     * Инструкция для интервьюера
     * @type {string}
     * @memberof TemplateChoice
     */
    hide?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateChoice
     */
    answerGroupTags?: string;
    /**
     * Флаги
     * @type {Array<string>}
     * @memberof TemplateChoice
     */
    flags?: Array<TemplateChoiceFlagsEnum>;
}

export function TemplateChoiceFromJSON(json: any): TemplateChoice {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'media': !exists(json, 'media') ? undefined : json['media'],
        'hide': !exists(json, 'hide') ? undefined : json['hide'],
        'answerGroupTags': !exists(json, 'answerGroupTags') ? undefined : json['answerGroupTags'],
        'flags': !exists(json, 'flags') ? undefined : json['flags'],
    };
}

export function TemplateChoiceToJSON(value?: TemplateChoice): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'name': value.name,
        'value': value.value,
        'comment': value.comment,
        'media': value.media,
        'hide': value.hide,
        'answerGroupTags': value.answerGroupTags,
        'flags': value.flags,
    };
}

/**
* @export
* @enum {string}
*/
export enum TemplateChoiceFlagsEnum {
    AddOpenAnswer = 'ADD_OPEN_ANSWER',
    SingleChoice = 'SINGLE_CHOICE',
    NonRotatable = 'NON_ROTATABLE',
    DoNotRead = 'DO_NOT_READ'
}


