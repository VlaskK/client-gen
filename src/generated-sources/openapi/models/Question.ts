// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Choice,
    ChoiceFromJSON,
    ChoiceToJSON,
    Department,
    DepartmentFromJSON,
    DepartmentToJSON,
    DictionaryItem,
    DictionaryItemFromJSON,
    DictionaryItemToJSON,
    Instant,
    InstantFromJSON,
    InstantToJSON,
    LocalDate,
    LocalDateFromJSON,
    LocalDateToJSON,
    ResearchData,
    ResearchDataFromJSON,
    ResearchDataToJSON,
} from './index';

/**
 * Вопрос
 * @export
 * @interface Question
 */
export interface Question  {
    /**
     * Уникальный идентификатор
     * @type {string}
     * @memberof Question
     */
    id?: string;
    /**
     * Код вопроса
     * @type {string}
     * @memberof Question
     */
    code?: string;
    /**
     * Название вопроса
     * @type {string}
     * @memberof Question
     */
    name?: string;
    /**
     * Описание вопроса
     * @type {string}
     * @memberof Question
     */
    description?: string;
    /**
     * 
     * @type {Department}
     * @memberof Question
     */
    department?: Department;
    /**
     * Префикс
     * @type {string}
     * @memberof Question
     */
    spssPrefix?: string;
    /**
     * Идентификатор пользователя
     * @type {string}
     * @memberof Question
     */
    userId?: string;
    /**
     * Категории
     * @type {Array<DictionaryItem>}
     * @memberof Question
     */
    categories?: Array<DictionaryItem>;
    /**
     * 
     * @type {DictionaryItem}
     * @memberof Question
     */
    type?: DictionaryItem;
    /**
     * Варианты ответа
     * @type {Array<Choice>}
     * @memberof Question
     */
    choices?: Array<Choice>;
    /**
     * Результат исследования
     * @type {string}
     * @memberof Question
     */
    researchDataId?: string;
    /**
     * 
     * @type {ResearchData}
     * @memberof Question
     */
    researchData?: ResearchData;
    /**
     * Доступно для редактирования
     * @type {boolean}
     * @memberof Question
     */
    editable?: boolean;
    /**
     * Порядковый номер
     * @type {number}
     * @memberof Question
     */
    order?: number;
    /**
     * Гриф секретности
     * @type {boolean}
     * @memberof Question
     */
    secrecy?: boolean;
    /**
     * 
     * @type {LocalDate}
     * @memberof Question
     */
    secrecyDueTime?: LocalDate;
    /**
     * 
     * @type {Instant}
     * @memberof Question
     */
    updatedTime?: Instant;
    /**
     * 
     * @type {Instant}
     * @memberof Question
     */
    createdTime?: Instant;
}

export function QuestionFromJSON(json: any): Question {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'department': !exists(json, 'department') ? undefined : DepartmentFromJSON(json['department']),
        'spssPrefix': !exists(json, 'spssPrefix') ? undefined : json['spssPrefix'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'categories': !exists(json, 'categories') ? undefined : (json['categories'] as Array<any>).map(DictionaryItemFromJSON),
        'type': !exists(json, 'type') ? undefined : DictionaryItemFromJSON(json['type']),
        'choices': !exists(json, 'choices') ? undefined : (json['choices'] as Array<any>).map(ChoiceFromJSON),
        'researchDataId': !exists(json, 'researchDataId') ? undefined : json['researchDataId'],
        'researchData': !exists(json, 'researchData') ? undefined : ResearchDataFromJSON(json['researchData']),
        'editable': !exists(json, 'editable') ? undefined : json['editable'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'secrecy': !exists(json, 'secrecy') ? undefined : json['secrecy'],
        'secrecyDueTime': !exists(json, 'secrecyDueTime') ? undefined : LocalDateFromJSON(json['secrecyDueTime']),
        'updatedTime': !exists(json, 'updatedTime') ? undefined : InstantFromJSON(json['updatedTime']),
        'createdTime': !exists(json, 'createdTime') ? undefined : InstantFromJSON(json['createdTime']),
    };
}

export function QuestionToJSON(value?: Question): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'code': value.code,
        'name': value.name,
        'description': value.description,
        'department': DepartmentToJSON(value.department),
        'spssPrefix': value.spssPrefix,
        'userId': value.userId,
        'categories': value.categories === undefined ? undefined : (value.categories as Array<any>).map(DictionaryItemToJSON),
        'type': DictionaryItemToJSON(value.type),
        'choices': value.choices === undefined ? undefined : (value.choices as Array<any>).map(ChoiceToJSON),
        'researchDataId': value.researchDataId,
        'researchData': ResearchDataToJSON(value.researchData),
        'editable': value.editable,
        'order': value.order,
        'secrecy': value.secrecy,
        'secrecyDueTime': LocalDateToJSON(value.secrecyDueTime),
        'updatedTime': InstantToJSON(value.updatedTime),
        'createdTime': InstantToJSON(value.createdTime),
    };
}


