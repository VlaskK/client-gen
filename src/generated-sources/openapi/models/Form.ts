// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Department,
    DepartmentFromJSON,
    DepartmentToJSON,
    DictionaryItem,
    DictionaryItemFromJSON,
    DictionaryItemToJSON,
    Instant,
    InstantFromJSON,
    InstantToJSON,
    LocalDate,
    LocalDateFromJSON,
    LocalDateToJSON,
    ResearchData,
    ResearchDataFromJSON,
    ResearchDataToJSON,
    ResearchProject,
    ResearchProjectFromJSON,
    ResearchProjectToJSON,
} from './index';

/**
 * Анкета
 * @export
 * @interface Form
 */
export interface Form  {
    /**
     * Уникальный идентификатор
     * @type {string}
     * @memberof Form
     */
    id: string;
    /**
     * Название
     * @type {string}
     * @memberof Form
     */
    name: string;
    /**
     * Описание
     * @type {string}
     * @memberof Form
     */
    description?: string;
    /**
     * 
     * @type {Department}
     * @memberof Form
     */
    department?: Department;
    /**
     * 
     * @type {ResearchProject}
     * @memberof Form
     */
    researchProject?: ResearchProject;
    /**
     * Гриф секретности
     * @type {boolean}
     * @memberof Form
     */
    secrecy?: boolean;
    /**
     * 
     * @type {LocalDate}
     * @memberof Form
     */
    secrecyDueTime?: LocalDate;
    /**
     * Категории анкеты
     * @type {Array<DictionaryItem>}
     * @memberof Form
     */
    categories?: Array<DictionaryItem>;
    /**
     * Результаты исследования
     * @type {Array<ResearchData>}
     * @memberof Form
     */
    researchData?: Array<ResearchData>;
    /**
     * Количество вопросов
     * @type {number}
     * @memberof Form
     */
    questionsCount?: number;
    /**
     * Количество респондентов
     * @type {number}
     * @memberof Form
     */
    respondentsCount?: number;
    /**
     * Идентификатор проекта анкеты
     * @type {string}
     * @memberof Form
     */
    projectId?: string;
    /**
     * 
     * @type {Instant}
     * @memberof Form
     */
    updatedTime?: Instant;
    /**
     * 
     * @type {Instant}
     * @memberof Form
     */
    createdTime: Instant;
}

export function FormFromJSON(json: any): Form {
    return {
        'id': json['id'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'department': !exists(json, 'department') ? undefined : DepartmentFromJSON(json['department']),
        'researchProject': !exists(json, 'researchProject') ? undefined : ResearchProjectFromJSON(json['researchProject']),
        'secrecy': !exists(json, 'secrecy') ? undefined : json['secrecy'],
        'secrecyDueTime': !exists(json, 'secrecyDueTime') ? undefined : LocalDateFromJSON(json['secrecyDueTime']),
        'categories': !exists(json, 'categories') ? undefined : (json['categories'] as Array<any>).map(DictionaryItemFromJSON),
        'researchData': !exists(json, 'researchData') ? undefined : (json['researchData'] as Array<any>).map(ResearchDataFromJSON),
        'questionsCount': !exists(json, 'questionsCount') ? undefined : json['questionsCount'],
        'respondentsCount': !exists(json, 'respondentsCount') ? undefined : json['respondentsCount'],
        'projectId': !exists(json, 'projectId') ? undefined : json['projectId'],
        'updatedTime': !exists(json, 'updatedTime') ? undefined : InstantFromJSON(json['updatedTime']),
        'createdTime': InstantFromJSON(json['createdTime']),
    };
}

export function FormToJSON(value?: Form): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'department': DepartmentToJSON(value.department),
        'researchProject': ResearchProjectToJSON(value.researchProject),
        'secrecy': value.secrecy,
        'secrecyDueTime': LocalDateToJSON(value.secrecyDueTime),
        'categories': value.categories === undefined ? undefined : (value.categories as Array<any>).map(DictionaryItemToJSON),
        'researchData': value.researchData === undefined ? undefined : (value.researchData as Array<any>).map(ResearchDataToJSON),
        'questionsCount': value.questionsCount,
        'respondentsCount': value.respondentsCount,
        'projectId': value.projectId,
        'updatedTime': InstantToJSON(value.updatedTime),
        'createdTime': InstantToJSON(value.createdTime),
    };
}


