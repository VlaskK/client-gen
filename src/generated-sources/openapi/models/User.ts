// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Instant,
    InstantFromJSON,
    InstantToJSON,
    Role,
    RoleFromJSON,
    RoleToJSON,
    Setting,
    SettingFromJSON,
    SettingToJSON,
} from './index';

/**
 * Пользователь
 * @export
 * @interface User
 */
export interface User  {
    /**
     * Уникальный идентификатор
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * Email
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * Логин пользователя
     * @type {string}
     * @memberof User
     */
    userName?: string;
    /**
     * Имя пользователя
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * Фамилия пользователя
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * Идентификатор в Active Directory
     * @type {string}
     * @memberof User
     */
    objectSid?: string;
    /**
     * Роли пользователя
     * @type {Array<Role>}
     * @memberof User
     */
    roles?: Array<Role>;
    /**
     * Настройки пользователя
     * @type {Array<Setting>}
     * @memberof User
     */
    settings?: Array<Setting>;
    /**
     * Идентификаторы групп в Active Directory
     * @type {Array<string>}
     * @memberof User
     */
    groups?: Array<string>;
    /**
     * 
     * @type {Instant}
     * @memberof User
     */
    createdTime?: Instant;
}

export function UserFromJSON(json: any): User {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'objectSid': !exists(json, 'objectSid') ? undefined : json['objectSid'],
        'roles': !exists(json, 'roles') ? undefined : (json['roles'] as Array<any>).map(RoleFromJSON),
        'settings': !exists(json, 'settings') ? undefined : (json['settings'] as Array<any>).map(SettingFromJSON),
        'groups': !exists(json, 'groups') ? undefined : json['groups'],
        'createdTime': !exists(json, 'createdTime') ? undefined : InstantFromJSON(json['createdTime']),
    };
}

export function UserToJSON(value?: User): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'email': value.email,
        'userName': value.userName,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'objectSid': value.objectSid,
        'roles': value.roles === undefined ? undefined : (value.roles as Array<any>).map(RoleToJSON),
        'settings': value.settings === undefined ? undefined : (value.settings as Array<any>).map(SettingToJSON),
        'groups': value.groups,
        'createdTime': InstantToJSON(value.createdTime),
    };
}


