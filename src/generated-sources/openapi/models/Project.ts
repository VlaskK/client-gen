// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Department,
    DepartmentFromJSON,
    DepartmentToJSON,
    Folder,
    FolderFromJSON,
    FolderToJSON,
    Form,
    FormFromJSON,
    FormToJSON,
    Instant,
    InstantFromJSON,
    InstantToJSON,
    ProjectParameter,
    ProjectParameterFromJSON,
    ProjectParameterToJSON,
    ProjectQuestion,
    ProjectQuestionFromJSON,
    ProjectQuestionToJSON,
    Quota,
    QuotaFromJSON,
    QuotaToJSON,
} from './index';

/**
 * Проект анкеты
 * @export
 * @interface Project
 */
export interface Project  {
    /**
     * Уникальный идентификатор
     * @type {string}
     * @memberof Project
     */
    id: string;
    /**
     * Название проекта анкеты
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * Вопросы с множественным выбором в категориальном режиме
     * @type {boolean}
     * @memberof Project
     */
    flMultipleChoiceInCategoricalMode?: boolean;
    /**
     * Номер стартового вопроса
     * @type {number}
     * @memberof Project
     */
    startQuestionNo?: number;
    /**
     * Квоты
     * @type {Array<Quota>}
     * @memberof Project
     */
    quotas?: Array<Quota>;
    /**
     * Вопросы
     * @type {Array<ProjectQuestion>}
     * @memberof Project
     */
    questions?: Array<ProjectQuestion>;
    /**
     * Параметры
     * @type {Array<ProjectParameter>}
     * @memberof Project
     */
    parameters?: Array<ProjectParameter>;
    /**
     * 
     * @type {Folder}
     * @memberof Project
     */
    folder?: Folder;
    /**
     * Анкеты
     * @type {Array<Form>}
     * @memberof Project
     */
    forms?: Array<Form>;
    /**
     * Только чтение
     * @type {boolean}
     * @memberof Project
     */
    readOnly?: boolean;
    /**
     * Подтверждено
     * @type {boolean}
     * @memberof Project
     */
    approved?: boolean;
    /**
     * Автор
     * @type {string}
     * @memberof Project
     */
    author?: string;
    /**
     * 
     * @type {Department}
     * @memberof Project
     */
    department?: Department;
    /**
     * 
     * @type {Instant}
     * @memberof Project
     */
    updatedTime?: Instant;
    /**
     * 
     * @type {Instant}
     * @memberof Project
     */
    createdTime?: Instant;
}

export function ProjectFromJSON(json: any): Project {
    return {
        'id': json['id'],
        'name': json['name'],
        'flMultipleChoiceInCategoricalMode': !exists(json, 'flMultipleChoiceInCategoricalMode') ? undefined : json['flMultipleChoiceInCategoricalMode'],
        'startQuestionNo': !exists(json, 'startQuestionNo') ? undefined : json['startQuestionNo'],
        'quotas': !exists(json, 'quotas') ? undefined : (json['quotas'] as Array<any>).map(QuotaFromJSON),
        'questions': !exists(json, 'questions') ? undefined : (json['questions'] as Array<any>).map(ProjectQuestionFromJSON),
        'parameters': !exists(json, 'parameters') ? undefined : (json['parameters'] as Array<any>).map(ProjectParameterFromJSON),
        'folder': !exists(json, 'folder') ? undefined : FolderFromJSON(json['folder']),
        'forms': !exists(json, 'forms') ? undefined : (json['forms'] as Array<any>).map(FormFromJSON),
        'readOnly': !exists(json, 'readOnly') ? undefined : json['readOnly'],
        'approved': !exists(json, 'approved') ? undefined : json['approved'],
        'author': !exists(json, 'author') ? undefined : json['author'],
        'department': !exists(json, 'department') ? undefined : DepartmentFromJSON(json['department']),
        'updatedTime': !exists(json, 'updatedTime') ? undefined : InstantFromJSON(json['updatedTime']),
        'createdTime': !exists(json, 'createdTime') ? undefined : InstantFromJSON(json['createdTime']),
    };
}

export function ProjectToJSON(value?: Project): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'name': value.name,
        'flMultipleChoiceInCategoricalMode': value.flMultipleChoiceInCategoricalMode,
        'startQuestionNo': value.startQuestionNo,
        'quotas': value.quotas === undefined ? undefined : (value.quotas as Array<any>).map(QuotaToJSON),
        'questions': value.questions === undefined ? undefined : (value.questions as Array<any>).map(ProjectQuestionToJSON),
        'parameters': value.parameters === undefined ? undefined : (value.parameters as Array<any>).map(ProjectParameterToJSON),
        'folder': FolderToJSON(value.folder),
        'forms': value.forms === undefined ? undefined : (value.forms as Array<any>).map(FormToJSON),
        'readOnly': value.readOnly,
        'approved': value.approved,
        'author': value.author,
        'department': DepartmentToJSON(value.department),
        'updatedTime': InstantToJSON(value.updatedTime),
        'createdTime': InstantToJSON(value.createdTime),
    };
}


