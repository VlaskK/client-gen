// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Department,
    DepartmentFromJSON,
    DepartmentToJSON,
    Instant,
    InstantFromJSON,
    InstantToJSON,
    TemplateBlock,
    TemplateBlockFromJSON,
    TemplateBlockToJSON,
    TemplateChoice,
    TemplateChoiceFromJSON,
    TemplateChoiceToJSON,
} from './index';

/**
 * Шаблон вопроса
 * @export
 * @interface TemplateQuestion
 */
export interface TemplateQuestion  {
    /**
     * Уникальный идентификатор
     * @type {string}
     * @memberof TemplateQuestion
     */
    id?: string;
    /**
     * Порядковый номер
     * @type {number}
     * @memberof TemplateQuestion
     */
    order?: number;
    /**
     * Блоки шаблонов вопросов, к которым относится шаблон вопроса
     * @type {Array<TemplateBlock>}
     * @memberof TemplateQuestion
     */
    blocks?: Array<TemplateBlock>;
    /**
     * Варианты ответа
     * @type {Array<TemplateChoice>}
     * @memberof TemplateQuestion
     */
    choices?: Array<TemplateChoice>;
    /**
     * Spss-префикс
     * @type {string}
     * @memberof TemplateQuestion
     */
    spssPrefix?: string;
    /**
     * Название
     * @type {string}
     * @memberof TemplateQuestion
     */
    name?: string;
    /**
     * Комментарий
     * @type {string}
     * @memberof TemplateQuestion
     */
    comment?: string;
    /**
     * Название приложенного файла
     * @type {string}
     * @memberof TemplateQuestion
     */
    media?: string;
    /**
     * Тип
     * @type {string}
     * @memberof TemplateQuestion
     */
    type?: TemplateQuestionTypeEnum;
    /**
     * Максимальное количество ответов
     * @type {number}
     * @memberof TemplateQuestion
     */
    maxChoiceCount?: number;
    /**
     * Формат открытого вопроса
     * @type {string}
     * @memberof TemplateQuestion
     */
    openAnswerFormat?: string;
    /**
     * Минималное значение
     * @type {string}
     * @memberof TemplateQuestion
     */
    minValue?: string;
    /**
     * Максимальное значение
     * @type {string}
     * @memberof TemplateQuestion
     */
    maxValue?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateQuestion
     */
    maxSumValue?: string;
    /**
     * Инструкция для интервьюера
     * @type {string}
     * @memberof TemplateQuestion
     */
    hide?: string;
    /**
     * Следующий вопрос
     * @type {string}
     * @memberof TemplateQuestion
     */
    next?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateQuestion
     */
    mapping?: string;
    /**
     * 
     * @type {number}
     * @memberof TemplateQuestion
     */
    rotateChoicesFrom?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplateQuestion
     */
    rotateChoicesTo?: number;
    /**
     * Флаги шаблона вопроса
     * @type {Array<string>}
     * @memberof TemplateQuestion
     */
    flags?: Array<TemplateQuestionFlagsEnum>;
    /**
     * 
     * @type {Department}
     * @memberof TemplateQuestion
     */
    department?: Department;
    /**
     * 
     * @type {Instant}
     * @memberof TemplateQuestion
     */
    updatedTime?: Instant;
    /**
     * 
     * @type {Instant}
     * @memberof TemplateQuestion
     */
    createdTime?: Instant;
}

export function TemplateQuestionFromJSON(json: any): TemplateQuestion {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'blocks': !exists(json, 'blocks') ? undefined : (json['blocks'] as Array<any>).map(TemplateBlockFromJSON),
        'choices': !exists(json, 'choices') ? undefined : (json['choices'] as Array<any>).map(TemplateChoiceFromJSON),
        'spssPrefix': !exists(json, 'spssPrefix') ? undefined : json['spssPrefix'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'media': !exists(json, 'media') ? undefined : json['media'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'maxChoiceCount': !exists(json, 'maxChoiceCount') ? undefined : json['maxChoiceCount'],
        'openAnswerFormat': !exists(json, 'openAnswerFormat') ? undefined : json['openAnswerFormat'],
        'minValue': !exists(json, 'minValue') ? undefined : json['minValue'],
        'maxValue': !exists(json, 'maxValue') ? undefined : json['maxValue'],
        'maxSumValue': !exists(json, 'maxSumValue') ? undefined : json['maxSumValue'],
        'hide': !exists(json, 'hide') ? undefined : json['hide'],
        'next': !exists(json, 'next') ? undefined : json['next'],
        'mapping': !exists(json, 'mapping') ? undefined : json['mapping'],
        'rotateChoicesFrom': !exists(json, 'rotateChoicesFrom') ? undefined : json['rotateChoicesFrom'],
        'rotateChoicesTo': !exists(json, 'rotateChoicesTo') ? undefined : json['rotateChoicesTo'],
        'flags': !exists(json, 'flags') ? undefined : json['flags'],
        'department': !exists(json, 'department') ? undefined : DepartmentFromJSON(json['department']),
        'updatedTime': !exists(json, 'updatedTime') ? undefined : InstantFromJSON(json['updatedTime']),
        'createdTime': !exists(json, 'createdTime') ? undefined : InstantFromJSON(json['createdTime']),
    };
}

export function TemplateQuestionToJSON(value?: TemplateQuestion): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'order': value.order,
        'blocks': value.blocks === undefined ? undefined : (value.blocks as Array<any>).map(TemplateBlockToJSON),
        'choices': value.choices === undefined ? undefined : (value.choices as Array<any>).map(TemplateChoiceToJSON),
        'spssPrefix': value.spssPrefix,
        'name': value.name,
        'comment': value.comment,
        'media': value.media,
        'type': value.type,
        'maxChoiceCount': value.maxChoiceCount,
        'openAnswerFormat': value.openAnswerFormat,
        'minValue': value.minValue,
        'maxValue': value.maxValue,
        'maxSumValue': value.maxSumValue,
        'hide': value.hide,
        'next': value.next,
        'mapping': value.mapping,
        'rotateChoicesFrom': value.rotateChoicesFrom,
        'rotateChoicesTo': value.rotateChoicesTo,
        'flags': value.flags,
        'department': DepartmentToJSON(value.department),
        'updatedTime': InstantToJSON(value.updatedTime),
        'createdTime': InstantToJSON(value.createdTime),
    };
}

/**
* @export
* @enum {string}
*/
export enum TemplateQuestionTypeEnum {
    Info = 'INFO',
    Open = 'OPEN',
    Closed = 'CLOSED'
}
/**
* @export
* @enum {string}
*/
export enum TemplateQuestionFlagsEnum {
    Skippable = 'SKIPPABLE',
    RotateChoices = 'ROTATE_CHOICES',
    RotateTableRows = 'ROTATE_TABLE_ROWS',
    Scale = 'SCALE',
    AbTesting = 'AB_TESTING',
    Rank = 'RANK',
    NotReadable = 'NOT_READABLE'
}


