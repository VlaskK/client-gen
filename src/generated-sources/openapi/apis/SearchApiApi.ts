// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    FileImportsList,
    FileImportsListFromJSON,
    FileImportsListToJSON,
    FormsList,
    FormsListFromJSON,
    FormsListToJSON,
    ObjectsList,
    ObjectsListFromJSON,
    ObjectsListToJSON,
    ProjectsList,
    ProjectsListFromJSON,
    ProjectsListToJSON,
    QuestionsList,
    QuestionsListFromJSON,
    QuestionsListToJSON,
    TemplateQuestionsList,
    TemplateQuestionsListFromJSON,
    TemplateQuestionsListToJSON,
} from '../models';

export interface SearchRequest {
    q?: string;
    department?: Array<string>;
    dateFrom?: string;
    dateTo?: string;
    start?: number;
    pageSize?: number;
}

export interface SearchFilesRequest {
    q: string;
    department?: Array<string>;
    dateFrom?: string;
    dateTo?: string;
    fileType?: Array<SearchFilesFileTypeEnum>;
    projectState?: Array<string>;
    start?: number;
    pageSize?: number;
}

export interface SearchFormsRequest {
    q: string;
    department?: Array<string>;
    category?: Array<number>;
    dateFrom?: string;
    dateTo?: string;
    region?: Array<string>;
    researchMethod?: Array<number>;
    sampleSizeFrom?: number;
    sampleSizeTo?: number;
    questionsCountFrom?: number;
    questionsCountTo?: number;
    start?: number;
    pageSize?: number;
}

export interface SearchProjectsRequest {
    q: string;
    department?: Array<string>;
    category?: Array<number>;
    dateFrom?: string;
    dateTo?: string;
    scope?: Array<SearchProjectsScopeEnum>;
    questionsCountFrom?: number;
    questionsCountTo?: number;
    start?: number;
    pageSize?: number;
}

export interface SearchQuestionsRequest {
    q: string;
    department?: Array<string>;
    category?: Array<number>;
    dateFrom?: string;
    dateTo?: string;
    scope?: Array<SearchQuestionsScopeEnum>;
    type?: number;
    region?: Array<string>;
    researchMethod?: Array<number>;
    sampleSizeFrom?: number;
    sampleSizeTo?: number;
    researchDaysFrom?: number;
    researchDaysTo?: number;
    start?: number;
    pageSize?: number;
}

export interface SearchTemplateQuestionsRequest {
    q: string;
    department?: Array<string>;
    category?: Array<number>;
    dateFrom?: string;
    dateTo?: string;
    scope?: Array<SearchTemplateQuestionsScopeEnum>;
    type?: number;
    questionsCountFrom?: number;
    questionsCountTo?: number;
    start?: number;
    pageSize?: number;
}


/**
 * Поиск по всем объектам
 */
function searchRaw<T>(requestParameters: SearchRequest, requestConfig: runtime.TypedQueryConfig<T, ObjectsList> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }


    if (requestParameters.department) {
        queryParameters['department'] = requestParameters.department;
    }


    if (requestParameters.dateFrom !== undefined) {
        queryParameters['dateFrom'] = requestParameters.dateFrom;
    }


    if (requestParameters.dateTo !== undefined) {
        queryParameters['dateTo'] = requestParameters.dateTo;
    }


    if (requestParameters.start !== undefined) {
        queryParameters['start'] = requestParameters.start;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ObjectsListFromJSON(body), text);
    }

    return config;
}

/**
* Поиск по всем объектам
*/
export function search<T>(requestParameters: SearchRequest, requestConfig?: runtime.TypedQueryConfig<T, ObjectsList>): QueryConfig<T> {
    return searchRaw(requestParameters, requestConfig);
}

/**
 * Поиск файлов
 */
function searchFilesRaw<T>(requestParameters: SearchFilesRequest, requestConfig: runtime.TypedQueryConfig<T, FileImportsList> = {}): QueryConfig<T> {
    if (requestParameters.q === null || requestParameters.q === undefined) {
        throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling searchFiles.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }


    if (requestParameters.department) {
        queryParameters['department'] = requestParameters.department;
    }


    if (requestParameters.dateFrom !== undefined) {
        queryParameters['dateFrom'] = requestParameters.dateFrom;
    }


    if (requestParameters.dateTo !== undefined) {
        queryParameters['dateTo'] = requestParameters.dateTo;
    }


    if (requestParameters.fileType) {
        queryParameters['fileType'] = requestParameters.fileType;
    }


    if (requestParameters.projectState) {
        queryParameters['projectState'] = requestParameters.projectState;
    }


    if (requestParameters.start !== undefined) {
        queryParameters['start'] = requestParameters.start;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search/files`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileImportsListFromJSON(body), text);
    }

    return config;
}

/**
* Поиск файлов
*/
export function searchFiles<T>(requestParameters: SearchFilesRequest, requestConfig?: runtime.TypedQueryConfig<T, FileImportsList>): QueryConfig<T> {
    return searchFilesRaw(requestParameters, requestConfig);
}

/**
 * Поиск анкеты
 */
function searchFormsRaw<T>(requestParameters: SearchFormsRequest, requestConfig: runtime.TypedQueryConfig<T, FormsList> = {}): QueryConfig<T> {
    if (requestParameters.q === null || requestParameters.q === undefined) {
        throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling searchForms.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }


    if (requestParameters.department) {
        queryParameters['department'] = requestParameters.department;
    }


    if (requestParameters.category) {
        queryParameters['category'] = requestParameters.category;
    }


    if (requestParameters.dateFrom !== undefined) {
        queryParameters['dateFrom'] = requestParameters.dateFrom;
    }


    if (requestParameters.dateTo !== undefined) {
        queryParameters['dateTo'] = requestParameters.dateTo;
    }


    if (requestParameters.region) {
        queryParameters['region'] = requestParameters.region;
    }


    if (requestParameters.researchMethod) {
        queryParameters['researchMethod'] = requestParameters.researchMethod;
    }


    if (requestParameters.sampleSizeFrom !== undefined) {
        queryParameters['sampleSizeFrom'] = requestParameters.sampleSizeFrom;
    }


    if (requestParameters.sampleSizeTo !== undefined) {
        queryParameters['sampleSizeTo'] = requestParameters.sampleSizeTo;
    }


    if (requestParameters.questionsCountFrom !== undefined) {
        queryParameters['questionsCountFrom'] = requestParameters.questionsCountFrom;
    }


    if (requestParameters.questionsCountTo !== undefined) {
        queryParameters['questionsCountTo'] = requestParameters.questionsCountTo;
    }


    if (requestParameters.start !== undefined) {
        queryParameters['start'] = requestParameters.start;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search/forms`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormsListFromJSON(body), text);
    }

    return config;
}

/**
* Поиск анкеты
*/
export function searchForms<T>(requestParameters: SearchFormsRequest, requestConfig?: runtime.TypedQueryConfig<T, FormsList>): QueryConfig<T> {
    return searchFormsRaw(requestParameters, requestConfig);
}

/**
 * Поиск проектов анкет
 */
function searchProjectsRaw<T>(requestParameters: SearchProjectsRequest, requestConfig: runtime.TypedQueryConfig<T, ProjectsList> = {}): QueryConfig<T> {
    if (requestParameters.q === null || requestParameters.q === undefined) {
        throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling searchProjects.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }


    if (requestParameters.department) {
        queryParameters['department'] = requestParameters.department;
    }


    if (requestParameters.category) {
        queryParameters['category'] = requestParameters.category;
    }


    if (requestParameters.dateFrom !== undefined) {
        queryParameters['dateFrom'] = requestParameters.dateFrom;
    }


    if (requestParameters.dateTo !== undefined) {
        queryParameters['dateTo'] = requestParameters.dateTo;
    }


    if (requestParameters.scope) {
        queryParameters['scope'] = requestParameters.scope;
    }


    if (requestParameters.questionsCountFrom !== undefined) {
        queryParameters['questionsCountFrom'] = requestParameters.questionsCountFrom;
    }


    if (requestParameters.questionsCountTo !== undefined) {
        queryParameters['questionsCountTo'] = requestParameters.questionsCountTo;
    }


    if (requestParameters.start !== undefined) {
        queryParameters['start'] = requestParameters.start;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search/projects`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProjectsListFromJSON(body), text);
    }

    return config;
}

/**
* Поиск проектов анкет
*/
export function searchProjects<T>(requestParameters: SearchProjectsRequest, requestConfig?: runtime.TypedQueryConfig<T, ProjectsList>): QueryConfig<T> {
    return searchProjectsRaw(requestParameters, requestConfig);
}

/**
 * Поиск вопросов
 */
function searchQuestionsRaw<T>(requestParameters: SearchQuestionsRequest, requestConfig: runtime.TypedQueryConfig<T, QuestionsList> = {}): QueryConfig<T> {
    if (requestParameters.q === null || requestParameters.q === undefined) {
        throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling searchQuestions.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }


    if (requestParameters.department) {
        queryParameters['department'] = requestParameters.department;
    }


    if (requestParameters.category) {
        queryParameters['category'] = requestParameters.category;
    }


    if (requestParameters.dateFrom !== undefined) {
        queryParameters['dateFrom'] = requestParameters.dateFrom;
    }


    if (requestParameters.dateTo !== undefined) {
        queryParameters['dateTo'] = requestParameters.dateTo;
    }


    if (requestParameters.scope) {
        queryParameters['scope'] = requestParameters.scope;
    }


    if (requestParameters.type !== undefined) {
        queryParameters['type'] = requestParameters.type;
    }


    if (requestParameters.region) {
        queryParameters['region'] = requestParameters.region;
    }


    if (requestParameters.researchMethod) {
        queryParameters['researchMethod'] = requestParameters.researchMethod;
    }


    if (requestParameters.sampleSizeFrom !== undefined) {
        queryParameters['sampleSizeFrom'] = requestParameters.sampleSizeFrom;
    }


    if (requestParameters.sampleSizeTo !== undefined) {
        queryParameters['sampleSizeTo'] = requestParameters.sampleSizeTo;
    }


    if (requestParameters.researchDaysFrom !== undefined) {
        queryParameters['researchDaysFrom'] = requestParameters.researchDaysFrom;
    }


    if (requestParameters.researchDaysTo !== undefined) {
        queryParameters['researchDaysTo'] = requestParameters.researchDaysTo;
    }


    if (requestParameters.start !== undefined) {
        queryParameters['start'] = requestParameters.start;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search/questions`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(QuestionsListFromJSON(body), text);
    }

    return config;
}

/**
* Поиск вопросов
*/
export function searchQuestions<T>(requestParameters: SearchQuestionsRequest, requestConfig?: runtime.TypedQueryConfig<T, QuestionsList>): QueryConfig<T> {
    return searchQuestionsRaw(requestParameters, requestConfig);
}

/**
 * Поиск шаблонов вопросов
 */
function searchTemplateQuestionsRaw<T>(requestParameters: SearchTemplateQuestionsRequest, requestConfig: runtime.TypedQueryConfig<T, TemplateQuestionsList> = {}): QueryConfig<T> {
    if (requestParameters.q === null || requestParameters.q === undefined) {
        throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling searchTemplateQuestions.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }


    if (requestParameters.department) {
        queryParameters['department'] = requestParameters.department;
    }


    if (requestParameters.category) {
        queryParameters['category'] = requestParameters.category;
    }


    if (requestParameters.dateFrom !== undefined) {
        queryParameters['dateFrom'] = requestParameters.dateFrom;
    }


    if (requestParameters.dateTo !== undefined) {
        queryParameters['dateTo'] = requestParameters.dateTo;
    }


    if (requestParameters.scope) {
        queryParameters['scope'] = requestParameters.scope;
    }


    if (requestParameters.type !== undefined) {
        queryParameters['type'] = requestParameters.type;
    }


    if (requestParameters.questionsCountFrom !== undefined) {
        queryParameters['questionsCountFrom'] = requestParameters.questionsCountFrom;
    }


    if (requestParameters.questionsCountTo !== undefined) {
        queryParameters['questionsCountTo'] = requestParameters.questionsCountTo;
    }


    if (requestParameters.start !== undefined) {
        queryParameters['start'] = requestParameters.start;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search/templateQuestions`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TemplateQuestionsListFromJSON(body), text);
    }

    return config;
}

/**
* Поиск шаблонов вопросов
*/
export function searchTemplateQuestions<T>(requestParameters: SearchTemplateQuestionsRequest, requestConfig?: runtime.TypedQueryConfig<T, TemplateQuestionsList>): QueryConfig<T> {
    return searchTemplateQuestionsRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum SearchFilesFileTypeEnum {
    Word = 'WORD',
    PowerPoint = 'POWER_POINT',
    Excel = 'EXCEL',
    Pdf = 'PDF',
    Other = 'OTHER'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchProjectsScopeEnum {
    Questions = 'QUESTIONS',
    Choices = 'CHOICES'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchQuestionsScopeEnum {
    Questions = 'QUESTIONS',
    Choices = 'CHOICES'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchTemplateQuestionsScopeEnum {
    Questions = 'QUESTIONS',
    Choices = 'CHOICES'
}
