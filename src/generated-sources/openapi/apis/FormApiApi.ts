// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Form,
    FormFromJSON,
    FormToJSON,
    Project,
    ProjectFromJSON,
    ProjectToJSON,
    SetPermissionRequest,
    SetPermissionRequestFromJSON,
    SetPermissionRequestToJSON,
} from '../models';

export interface CreateFormForProjectRequest {
    projectId: string;
}

export interface CreateProjectRequest {
    researchDataId: string;
}

export interface DeleteFormRequest {
    id: string;
}

export interface GetFormRequest {
    id: string;
}

export interface SetPermissionsRequest {
    id: string;
    setPermissionRequest: SetPermissionRequest;
}


/**
 * Создание анкеты для проекта анкеты
 */
function createFormForProjectRaw<T>(requestParameters: CreateFormForProjectRequest, requestConfig: runtime.TypedQueryConfig<T, Form> = {}): QueryConfig<T> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
        throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createFormForProject.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/form/project/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormFromJSON(body), text);
    }

    return config;
}

/**
* Создание анкеты для проекта анкеты
*/
export function createFormForProject<T>(requestParameters: CreateFormForProjectRequest, requestConfig?: runtime.TypedQueryConfig<T, Form>): QueryConfig<T> {
    return createFormForProjectRaw(requestParameters, requestConfig);
}

/**
 * Создание проекта анкеты из результата исследования
 */
function createProjectRaw<T>(requestParameters: CreateProjectRequest, requestConfig: runtime.TypedQueryConfig<T, Project> = {}): QueryConfig<T> {
    if (requestParameters.researchDataId === null || requestParameters.researchDataId === undefined) {
        throw new runtime.RequiredError('researchDataId','Required parameter requestParameters.researchDataId was null or undefined when calling createProject.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/form/researchData/{researchDataId}/project`.replace(`{${"researchDataId"}}`, encodeURIComponent(String(requestParameters.researchDataId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProjectFromJSON(body), text);
    }

    return config;
}

/**
* Создание проекта анкеты из результата исследования
*/
export function createProject<T>(requestParameters: CreateProjectRequest, requestConfig?: runtime.TypedQueryConfig<T, Project>): QueryConfig<T> {
    return createProjectRaw(requestParameters, requestConfig);
}

/**
 * Удаление анкеты
 */
function deleteFormRaw<T>(requestParameters: DeleteFormRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteForm.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/form/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Удаление анкеты
*/
export function deleteForm<T>(requestParameters: DeleteFormRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteFormRaw(requestParameters, requestConfig);
}

/**
 * Получение анкеты
 */
function getFormRaw<T>(requestParameters: GetFormRequest, requestConfig: runtime.TypedQueryConfig<T, Form> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getForm.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/form/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormFromJSON(body), text);
    }

    return config;
}

/**
* Получение анкеты
*/
export function getForm<T>(requestParameters: GetFormRequest, requestConfig?: runtime.TypedQueryConfig<T, Form>): QueryConfig<T> {
    return getFormRaw(requestParameters, requestConfig);
}

/**
 * Задание прав достуа вопросам анкеты
 */
function setPermissionsRaw<T>(requestParameters: SetPermissionsRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling setPermissions.');
    }

    if (requestParameters.setPermissionRequest === null || requestParameters.setPermissionRequest === undefined) {
        throw new runtime.RequiredError('setPermissionRequest','Required parameter requestParameters.setPermissionRequest was null or undefined when calling setPermissions.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/form/{id}/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SetPermissionRequestToJSON(requestParameters.setPermissionRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Задание прав достуа вопросам анкеты
*/
export function setPermissions<T>(requestParameters: SetPermissionsRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return setPermissionsRaw(requestParameters, requestConfig);
}

